<?php
/**
 * @file devshop_pull.module
 *
 * Provides a Hosting Queue and a URL callback for remote services to ping, in
 * order to trigger a Pull Code task.
 *
 * Used to keep a dev server up to date with the commits of projects.
 *
 */

define('DEVSHOP_PULL_DISABLED', 0);
define('DEVSHOP_PULL_QUEUE', 1);
define('DEVSHOP_PULL_CALLBACK', 2);

define('DEVSHOP_PULL_STATUS_OK', 1);
define('DEVSHOP_PULL_STATUS_ACCESS_DENIED', 2);
define('DEVSHOP_PULL_STATUS_INVALID_CODE', 3);

// These are github's Webhook callback IPs.
// This list grows occaisonally, update it as needed.
define('DEVSHOP_PULL_DEFAULT_ALLOWED_IPS',"
204.232.175.64/27
192.30.252.0/22
");

// The base URL to use for the Post Commit callback.
define('DEVSHOP_PULL_CALLBACK_URL', 'devshop/pull');

/**
 * Implements hook_perm()
 */
function devshop_pull_perm() {
  return array(
    'configure devshop pull',
  );
}

/**
 * Implements hook_menu()
 */
function devshop_pull_menu() {
  $items['admin/hosting/devshop/pull'] = array(
    'title' => 'Pull',
    'description' => 'Configure Pull Code URL callback ',
    'page callback' => 'devshop_pull_settings_page',
    'access arguments' => array('administer hosting settings'),
    'file' => 'devshop_pull.settings.inc',
    'tab_parent' => 'admin/hosting/devshop',
    'type' => MENU_LOCAL_TASK,
  );
  $items[DEVSHOP_PULL_CALLBACK_URL] = array(
    'page callback' => 'devshop_pull_callback',
    'access callback' => TRUE,
    'file' => 'devshop_pull.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_hosting_queues()
 */
function devshop_pull_hosting_queues() {
  $items['pull'] = array(
    'type' => 'batch',
    'name' => t('Pull queue'),
    'description' => t('Run git pull on projects configured to do so.'),
    'total_items' => count(devshop_pull_get_projects(5)),
    'frequency' => strtotime("1 minute", 0),
    'singular' => t('project'),
    'plural' => t('projects'),
  );
  return $items;
}

/**
 * Implements hook_devshop_project_settings()
 */
function devshop_pull_devshop_project_settings(){
  return array(
    'pull_disabled' => array(
      '#title' => t('Disable Pull on Commit'),
      '#node_type' => 'platform',
      '#type' => 'checkbox',
      '#description' => t('Turn off automatic code updates for this environment.'),
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function devshop_pull_form_alter(&$form, &$form_state, $form_id) {

  // On Projects, add "Choose Pull Method"
  if ($form_id == 'project_node_form') {
    // Get node
    $node = $form['#node'];

    //All settings git pull in project page
    $form['project']['settings']['pull'] = array(
      '#type' => 'fieldset',
      '#title' => t('Git Settings'),
    );

    $form['project']['settings']['pull']['pull_enabled'] = array(
      '#title' => 'Pull on Commit',
      '#type' => 'checkbox',
      '#description' => t('Run a "Pull Code" task when a commit notification is received. All environments set to a branch will have their code updated.'),
      '#default_value' => $node->project->settings->pull['pull_enabled'],
      '#attributes' => array(
      ),
    );

    module_load_include('inc', 'devshop_pull');
    $form['project']['settings']['pull']['pull_url'] = array(
      '#type' => 'item',
      '#title' => t('Pull Trigger URL'),
      '#value' => _devshop_pull_callback_url($node),
      '#description' => t('Configure your repo to hit this URL when it receives a commit.'),
      '#prefix' => '<div id ="pull-url" ' . $display_none . '>',
      '#suffix' => '</div>',
    );
    $queues = hosting_get_queues();
    $form['project']['settings']['pull']['queue_enabled'] = array(
      '#title' => 'Pull on Queue',
      '#type' => 'checkbox',
      '#description' => t('Run a "Pull Code" task on a regular basis using Aegir Queues.'),
      '#default_value' => $node->project->settings->pull['queue_enabled'],
      '#access' => $queues['pull']['enabled'],
    );

    // @TODO: is there a better way to save certain values? We lose data without these.
    $form['project']['settings']['pull']['last_pull'] = array(
      '#type' => 'value',
      '#value' => $node->project->settings->pull['last_pull'],
    );
    $form['project']['settings']['pull']['last_pull_status'] = array(
      '#type' => 'value',
      '#value' => $node->project->settings->pull['last_pull_status'],
    );
    $form['project']['settings']['pull']['last_pull_ip'] = array(
      '#type' => 'value',
      '#value' => $node->project->settings->pull['last_pull_ip'],
    );

    // @TODO: Make this more abstract and extensible.
    $is_github = (strpos($node->project->git_url, 'github.com') !== FALSE);

    //All settings git pull in project page
    $form['project']['settings']['github'] = array(
      '#type' => 'fieldset',
      '#title' => t('GitHub Integration'),
      '#access' => $is_github,
    );

    // Pull Requests create environments?
    $form['project']['settings']['github']['pull_request_environments'] = array(
      '#type' => 'checkbox',
      '#title' => t('Create Environments for Pull Requests'),
      '#default_value' => $node->project->settings->github['pull_request_environments'],
      '#description' => t('If using GitHub, create a new environment when a new Pull Request is created.'),
      '#access' => $is_github,
    );

    // Delete Pull Request environments?
    $form['project']['settings']['github']['pull_request_environments_delete'] = array(
      '#type' => 'checkbox',
      '#title' => t('Delete Pull Request Environments'),
      '#default_value' => $node->project->settings->github['pull_request_environments_delete'],
      '#description' => t('When Pull Requests are closed, delete the environment.'),
    );

  }
}

/**
 * Implements hook_nodeapi()
 *
 * @todo Break this out into aegir's subhook hook_nodeapi_OP_TYPE()
 */
function devshop_pull_nodeapi(&$node, $op, $a3 = null) {

  // PROJECTS
  if ($node->type == 'project'){

    // View Project
    if ($op == 'view' && $node->project->settings->pull['pull_enabled']){

      $pull_data = $node->project->settings->pull;

      module_load_include('inc', 'devshop_pull');
      $url = _devshop_pull_callback_url($node);
      $output = '';

      $status = (int) $pull_data['last_pull_status'];
      $node->pull_status = $status;

      // If access denied, provide link to settings page
      if ($status == DEVSHOP_PULL_STATUS_ACCESS_DENIED){
        $output .= t('Commit notification received %ago from %ip, but that IP is not allowed to trigger tasks.  See !link.', array(
          '!link' => l(t('DevShop Pull Settings'), '/admin/hosting/devshop/pull'),
          '%ip' => $pull_data['last_pull_ip'],
          '%ago' => hosting_format_interval($pull_data['last_pull'])
        ));
      }
      // If OK, show how much time has passed.
      elseif ($status == DEVSHOP_PULL_STATUS_OK) {
        $output = hosting_format_interval($pull_data['last_pull']);
      }
      // Otherwise, we assume no commit notification recieved.
      else {
        $output .= t('No commit notifications received.  Setup a webhook on your Git host to ping: ');
        $output .= strtr(" <input type='textfield' value='!url' onclick='this.select();' size='63'/>", array('!url' => $url));
      }
      $node->content['info']['last_pull'] = array(
        '#type' => 'item',
        '#title' => t('Last Commit'),
        '#weight' => 32,
        '#value' => $output,
      );
      $node->pull_message = $output;
    }
  }
}

/**
 * Get a number of platforms that have their pull queue enabled.
 *
 * @param $limit
 *   Limit to a maximum of this number of platforms.
 * @return
 *   An array of site nodes that have a pull queue enabled.
 *
 */
function devshop_pull_get_projects($limit = 5) {

  $results = db_query("SELECT * FROM {hosting_devshop_project} LIMIT %d", $limit);

  $projects = array();
  while ($result = db_fetch_object($results)) {
    $node = node_load($result->nid);
    $project = $node->project;

    if ($project->settings->pull['queue_enabled']){
      $projects[] = $project;
    }
  }

  return $projects;
}

/**
 * Implements hosting_QUEUE_TYPE_queue().
 */
function hosting_pull_queue($count) {

  $projects = devshop_pull_get_projects($count);

  foreach ($projects as $project) {
    $environments_to_pull = array();
    foreach ($project->environments as $environment) {
      if (!$environment->settings['pull_disabled']) {
        $environments_to_pull[] = $environment->name;
      }
    }
    $args = array();
    $args['environments'] = implode(' ', $environments_to_pull);
    hosting_add_task($project->nid, 'devshop-pull', $args);

    module_invoke_all('devshop_pull', $project);
  }
}
