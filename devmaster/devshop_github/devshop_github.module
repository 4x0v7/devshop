<?php

define('GITHUB_POST_RECIEVE_PATH', 'git/post-receive');

/**
 * Implementation of hook_perm()
 */
function devshop_github_perm() {
  return array(
    'allow GitHub WebHooks',
  );
}

/**
 * Implementation of hook_menu()
 */
function devshop_github_menu() {

   $items[GITHUB_POST_RECIEVE_PATH] = array(
    'page callback' => 'devshop_github_post_receive_webhook',
    'access callback' => TRUE,
  );

  return ($items);
}

/*
 * Callback that is invoked by GitHub WebHook facility to create
 * a code pull task.
 */
function devshop_github_post_receive_webhook($platform, $hash) {

  if (strlen($platform) < 1 || strlen($hash) != 32) {
    print "bad parrms";
    return;
  }

  $pnid = db_result(db_query(
    "SELECT nid FROM {hosting_context} WHERE name = '%s'", $platform));

  if (!$pnode = node_load($pnid)) {
    print "node_load failed";
    return;
  }

  if (_devshop_github_hash_create($pnode) != $hash) {
    print "hash check failed";
    return;
  }

  // Iterate through all of the sites that use this platform
  $r = db_query("SELECT nid FROM {hosting_site} " .
                "WHERE platform = %d AND status = 1", $pnid);

  $args = array(
    'update' => 0,
    'revert' => 0,
    'cache'  => 1
  );

  while ($site = db_fetch_object($r)) {
    print "<br>Queing a pull task for node id $site->nid<br>";
    hosting_add_task($site->nid, 'devshop-pull', $args);
  } 
}

/*
 * Create the full URL that is displayed in the platform node view
 * and given to the GitHub WebHook to invoke a pull after a commit.
 */
function _devshop_github_post_receive_url($node) {
  return url(GITHUB_POST_RECIEVE_PATH .
	'/' . $node->hosting_name .
	'/' . _devshop_github_hash_create($node), 
	array('absolute' => TRUE));
}

/*
 * Create a security hash code based on the platform node
 */
function _devshop_github_hash_create($node) {
  return md5($node->hosting_name . $node->nid);
}

/**
 * hook_nodeapi()
 */
function devshop_github_nodeapi(&$node, $op, $a3 = null) {
  if ($node->type == 'platform') {
    switch ($op) {
      case 'view':
        if (!$a3) { //!teaser
	  $purl = _devshop_github_post_receive_url($node);
          $node->content['info']['github_webhook'] = array(
            '#type' => 'item',
            '#title' => t('Pull Code URL'),
            '#weight' => 30,
            '#value' => l($purl, $purl),
          );
        }
        break;
     }
  }
}
