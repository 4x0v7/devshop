<?php

/**
 * Implements hook_hosting_queues()
 */
function devshop_queue_hosting_queues() {
  $items['pull'] = array(
    'type' => 'batch', 
    'name' => t('Pull queue'), 
    'description' => t('Run git pull on platforms configured to do so.'), 
    'total_items' => hosting_site_count(), 
    'frequency' => strtotime("1 minute", 0), 
    'min_threads' => 6, 
    'max_threads' => 12, 
    'threshold' => 100, 
    'singular' => t('platform'), 
    'plural' => t('platforms'),
  );
  return $items;
}

/**
<<<<<<< HEAD
 * Implements hook_form_alter().
 */
function devshop_queue_form_alter(&$form, &$form_status, $form_id){
  if ($form_id == 'platform_node_form'){
    drupal_set_message('node form');
    $form['devshop'] = array(
      '#type' => 'fieldset',
      '#title' => t('DevShop'),
    );
    $form['devshop']['pull'] = array(
      '#title' => 'Enable Pull Queue',
      '#type' => 'checkbox',
      '#description' => t('Put this platform into the regular Git Pull queue.  See !link to configure the queue.', array(
        '!link' => l(t('Hosting Queues'), 'admin/hosting/queues'))
      ),
    );
    $form['devshop']['pull_reset'] = array(
      '#title' => 'Hard Reset on Pull',
      '#type' => 'checkbox',
      '#description' => t('Reset any changes to platform files. <em>WARNING: Any uncommitted changes to the platform files will be discarded.</em>', array(
        '!link' => l(t('Hosting Queues'), 'admin/hosting/queues'))
      ),
    );
  }
}
/**
 * Implementation of hosting_QUEUE_TYPE_queue().
 */
function hosting_pull_queue($count) {
  //@TODO: ASAP! All sites will pull now! Allow user to choose if a platform should autopull, and if should reset
  $result = db_query("SELECT n.nid FROM {node} n LEFT JOIN {hosting_platform} s ON n.nid=s.nid WHERE n.type='platform' and s.status = %d ORDER BY s.last_cron ASC, n.nid ASC", HOSTING_PLATFORM_ENABLED);
  
  $i = 0;
  while ($i < $count && $nid = db_fetch_object($result)) {
    $site = node_load($nid->nid);
    $platform_name = hosting_context_name($site->nid);
    provision_backend_invoke($platform_name, "pull");
    $i++;
  }
}

/**
 * hook_nodeapi()
 */
function devshop_queue_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'insert':
      dsm($op);
      break;
    case 'update':
      //db_query('UPDATE {devshop_queue} SET ('));
      break;
    case 'view':
      if (!$a3) {
        // @todo : turn it into x minutes ago
        $node->content['info']['last_pull'] = array(
          '#type' => 'item',
          '#title' => t('Last pull'),
          '#weight' => 20,
          '#value' => 'COMING SOON', //hosting_format_interval($node->last_cron)
        );
      }
      break;
  }
}

/**
 * Get a number of sites that need to have cron executed.
 *
 * @param $limit
 *   Limit to a maximum of this number of sites.
 * @return
 *   An array of site nodes that need to have cron executed.
 *
 * @deprecated function unused
 */
function devshop_queue_get_sites($limit = 5) {
  $result = db_query("SELECT n.nid FROM {node} n LEFT JOIN {hosting_platform} p ON n.nid=p.nid WHERE n.type='platform' and p.status = %d ORDER BY p.last_cron ASC, n.nid ASC limit %d", HOSTING_PLATFORM_ENABLED, $limit);
  while ($nid = db_fetch_object($result)) {
    $sites[$nid->nid] = node_load($nid->nid);
  }
  return $sites;
>>>>>>> aa8fd08523db61a693da8ed52ba26363beccc271
}