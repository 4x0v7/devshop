<?php
/*
 * @file devshop_projects.module: a module in the DevShop module group 
 * which enables the user to create proects and group sites/platforms
 * into project groups.
 */

/**
 * Implementation of hook_perm()
 */
function devshop_projects_perm() {
  return array(
    'view projects',
  );
}

/**
 * Implementation of hook_node_info().
 */
function devshop_projects_node_info() {
  #configuration
  $types["devshop_project"] =  array(
    "type" => 'devshop_project', 
    "name" => 'DevShop Project',
    "module" => 'devshop_projects',
    "has_title" => TRUE, 
    "title_label" => t('Project Codename'),
    "description" => t('Create a project'),
    "has_body" => 0, 
    "body_label" => '', 
    "min_word_count" => 0
    );

  return $types;
}

/**
 * Implementation of hook_menu()
 */
function devshop_projects_menu() {

  $items['hosting/projects'] = array(
    'title' => 'Projects',
    'description' => 'Display a list of all projects',
    'page callback' => 'devshop_projects_projects_view',
    'access arguments' => array('view projects'),
  );

  return ($items);
}

/*
 * Callback that is invoked when the user points the brower to
 * hosting/projects. It displays a nice tabulated list of projects
 * and cool thing you can do with them.
 */

function devshop_projects_projects_view() {
  if ($list = drupal_get_form('devshop_projects_projects_list_form')) {
    return $list;
  }
  $create_project_link = l(t('Create a site now?'), 'node/add/project');
  return t("No projects have been created yet. !link", array(
    '!link' => $create_project_link));
}

/**
 * Create a form for building a list of projects.
 */
function devshop_projects_projects_list_form($form_state, $filter_by = NULL, $filter_value = NULL) {
 
  return array();
} 

/**
 * hook_nodeapi()
 */
function devshop_projects_nodeapi(&$node, $op, $a3 = null) {

  $etype = array('dev' => 'Dev',
  	   	 'test' => 'Test',
		 'live' => 'Live');

  if ($node->type == 'site') {
    switch ($op) {
      case 'view':
        if (!$a3) { //!teaser
          $node->content['info']['environment'] = array(
	    '#type' => 'item',
    	    '#title' => t('Environment Type'),
            '#value' => t($etype[$node->environment]),
    	    '#description' => t('')
  	    );

        }
        break;

    case 'load':
      $url = db_result(db_query("SELECT git_url " .
				"FROM {hosting_platform_git} " .
				"WHERE nid = %d", $node->nid));

      if (!empty($url)){
        $node->git_url = $url;
      }
      break;

    case 'insert':
    case 'update':
      db_query("DELETE FROM {hosting_platform_git} " .
      	       "WHERE nid = %d", $node->nid);
      db_query("INSERT INTO {hosting_platform_git} " .
               "(nid, git_url, cloned) " .
               "VALUES (%d, '%s', 0)", 
	       $node->nid, $node->git_url);
      break;
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function devshop_projects_form_alter(&$form, &$form_state, $form_id){
  if ($form_id == 'site_node_form'){
    $node = $form['#node'];
    $form['devshop'] = array(
      '#type' => 'fieldset',
      '#title' => t('DevShop'),
    );

    $etype = array('dev' => 'Dev',
    	           'test' => 'Test',
		   'live' => 'Live');

    $form['devshop']['environement'] = array(
      '#title' => 'Environment Type',
      '#type' => 'select',
      '#description' => t('Select the environement type for this site'),
      '#options' => $etype,
    );
  }
}
