<?php
/**
 * @file devshop_projects.module
 * a module in the DevShop module group which enables the user to create proects and group
 * sites/platforms into project groups.
 */

/**
 * Implementation of hook_hosting_tasks()
 */
function devshop_projects_hosting_tasks() {
  $tasks = array();
  $tasks['devshop_project']['devshop-create'] = array(
    'title' => t('Create Project'),
    'description' => t('Clones the repo, and creates the platforms.'),
  );
  return $tasks;
}

/**
 * Implementation of hook_perm()
 */
function devshop_projects_perm() {
  return array(
    'view projects',
  );
}

/**
 * Implementation of hook_node_info().
 */
function devshop_projects_node_info() {
  #configuration
  $types["devshop_project"] =  array(
    "type" => 'devshop_project', 
    "name" => 'DevShop Project',
    "module" => 'devshop_projects',
    "has_title" => TRUE, 
    "title_label" => t('Project Codename'),
    "description" => t('Create a project'),
    "has_body" => 0, 
    "body_label" => '', 
    "min_word_count" => 0
    );

  return $types;
}

/**
 * Implementation of hook_menu()
 */
function devshop_projects_menu() {

  $items['hosting/projects'] = array(
    'title' => 'Projects',
    'description' => 'Display a list of all projects',
    'page callback' => 'devshop_projects_projects_view',
    'access arguments' => array('view projects'),
  );

  return ($items);
}

/*
 * Callback that is invoked when the user points the brower to
 * hosting/projects. It displays a nice tabulated list of projects
 * and cool thing you can do with them.
 */

function devshop_projects_projects_view() {
  if ($list = drupal_get_form('devshop_projects_projects_list_form')) {
    return $list;
  }
  $create_project_link = l(t('Create a site now?'), 'node/add/project');
  return t("No projects have been created yet. !link", array(
    '!link' => $create_project_link));
}

/**
 * Create a form for building a list of projects.
 */
function devshop_projects_projects_list_form($form_state, $filter_by = NULL, $filter_value = NULL) {
 
  return array();
} 

/**
 * hook_nodeapi()
 */
function devshop_projects_nodeapi(&$node, $op, $a3 = null) {

  $etype = array('dev' => 'Dev',
  	   	 'test' => 'Test',
		 'live' => 'Live');

  if ($node->type == 'site') {
    switch ($op) {
      case 'view':
        if (!$a3) { //!teaser
          $node->content['info']['environment'] = array(
	    '#type' => 'item',
    	    '#title' => t('Environment Type'),
            '#value' => t($etype[$node->environment]),
    	    '#description' => t('')
  	    );

        }
        break;

    case 'load':
      if (!empty($url)){
        $node->git_url = $url;
      }
      break;

    case 'insert':
    case 'update':
/*
      db_query("DELETE FROM {hosting_platform_git} " .
      	       "WHERE nid = %d", $node->nid);
      db_query("INSERT INTO {hosting_platform_git} " .
               "(nid, git_url, cloned) " .
               "VALUES (%d, '%s', 0)", 
	       $node->nid, $node->git_url);
*/
      break;
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function devshop_projects_form_alter(&$form, &$form_state, $form_id){
  if ($form_id == 'site_node_form'){
    $node = $form['#node'];
    $form['devshop'] = array(
      '#type' => 'fieldset',
      '#title' => t('DevShop'),
    );

    $etype = array('dev' => 'Dev',
    	           'test' => 'Test',
		   'live' => 'Live');

    $form['devshop']['environement'] = array(
      '#title' => 'Environment Type',
      '#type' => 'select',
      '#description' => t('Select the environement type for this site'),
      '#options' => $etype,
    );
  }
}

/**
 * Implementation of hook_form().
 */
function devshop_projects_form(&$node) {

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Project Code Name'),
    '#required' => TRUE,
    '#description' => t('Choose a unique name for your project.'),
    '#size' => 40,
    '#default_value' => $node->title,
    '#maxlength' => 255,
  );

  $form['git_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Git URL'),
    '#required' => TRUE,
    '#description' => t(''),
    '#size' => 40,
    '#default_value' => $node->git_url,
    '#maxlength' => 255,
    '#weight' => 1,
  );

  $form['code_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Code path'),
    '#description' => t('The absolute path on the filesystem that will be used to create the platform in the directory specified above.'),
    '#size' => 40,
    '#default_value' => $node->code_path,
    '#maxlength' => 255,
    '#weight' => 2,
  );

  $sites = array(0 => 'None');
  $r = db_query("SELECT n.nid, n.title FROM {node} AS n " .
       		"LEFT JOIN {hosting_site} AS h ON n.nid = h.nid " .
		"WHERE n.type = 'site' AND h.status = 1 " .
		"ORDER BY n.title ASC");

  while($sa = db_fetch_object($r)) {
    $sites[$sa->nid] = $sa->title;
  }

  $form['dev_site'] = array(
    '#type' => 'select',
    '#title' => t('DEV Site'),
    '#options' => $sites,
    '#description' => t('Select site that is going to be your development site.'),
    '#default_value' => $node->dev_site,
  );

  $form['test_site'] = array(
    '#type' => 'select',
    '#title' => t('TEST Site'),
    '#options' => $sites,
    '#description' => t('Select site that is going to be your test site.'),
    '#default_value' => $node->test_site,
  );

  $form['live_site'] = array(
    '#type' => 'select',
    '#title' => t('LIVE Site'),
    '#options' => $sites,
    '#description' => t('Select site that is going to be your live site.'),
    '#default_value' => $node->live_site,
  );

  return $form;
}

/**
 * Implementation of hook_insert().
 */
function devshop_projects_insert($node) {

  db_query("INSERT INTO {hosting_devshop_project} (nid, git_url, code_path) ".
  	   "VALUES (%d, '%s', '%s')",
	   $node->nid, $node->git_url, $node->code_path);

  foreach(array('dev_site' => 'dev', 
                'test_site' => 'test', 
                'live_site' => 'live') as $k => $v) {
    if($node->$k) {
      $snode = node_load($node->$k);
      db_query("INSERT INTO {hosting_devshop_project_sites} " .
               "(nid, site_nid, platform_nid, env_type) " .
	       "VALUES (%d, %d, %d, '%s')",
	       $node->nid, $node->$k, $snode->platform, $v);
    }
  }
  
  // Save hosting context
  if ((!$node->old_vid)) {
    hosting_context_register($node->nid, ($node->hosting_name) ? $node->hosting_name : $node->title);
  }
  
  // Create hostmaster task
  // @TODO: This fails because there is no alias being saved for this node...
  $args = array();
  $args[] = $node->git_url;
  $args[] = $node->code_path;
  hosting_add_task($node->nid, 'devshop-create', $args);
}

/**
 * Implementation of hook_update().
 *
 * As an existing node is being updated in the database, we need to do our own
 * database updates.
 */
function devshop_projects_update($node) {
  // if this is a new node or we're adding a new revision,
  if (!empty($node->revision)) {
    hosting_devshop_project_insert($node);
  }
  else {
    db_query("UPDATE {hosting_devshop_project} " .
             "SET git_url = '%s', code_path = '%s' WHERE nid=%d",
              $node->git_url, $node->code_path);
  }
}

/**
 * Implementation of hook_delete().
 */
function devshop_projects_delete($node) {
  db_query('DELETE FROM {hosting_devshop_project} WHERE nid = %d', $node->nid);
  db_query('DELETE FROM {hosting_devshop_project_sties} WHERE nid = %d', $node->nid);
}

/**
 * Implementation of hook_validate().
 */
function devshop_projects_validate($node, &$form) {
// TODO
}

/**
 * Implementation of hook_load().
 *
 * @param node
 *    Node object
 */
function devshop_projects_load($node) {
  $additions = db_fetch_array(db_query('SELECT git_url, code_path ' .
                                        'FROM {hosting_devshop_project} ' .
                                        'WHERE nid = %d', $node->nid));
  $hosting_name = db_fetch_array(db_query("SELECT name AS hosting_name FROM {hosting_context} WHERE nid = %d", $node->nid));
  if (is_array($hosting_name)) {
    $additions += $hosting_name;
  }
  return $additions;
}

/**
 * Implementation of hook_view().
 */
function devshop_projects_view($node, $teaser = FALSE, $page = FALSE) {
  modalframe_parent_js();

  $node->content['info'] = array(
    '#prefix' => '<div id="hosting-platform-info">',
    '#suffix' => '</div>'
  );

  $node->content['info']['git_url'] = array(
    '#type' => 'item',
    '#title' => t('Git URL'),
    '#value' => $node->git_url,
    '#weight' => -10
  );

  $node->content['info']['code_path'] = array(
    '#type' => 'item',
    '#title' => t('Code path'),
    '#value' => filter_xss($node->code_path),
    '#weight' => -8
  );
 
  return $node;
}

/**
 * Hide the delete button on project nodes.
 */
function hosting_devshop_projects_form_alter(&$form, &$form_state, $form_id) {
  // Remove delete button from the edit form
  if ($form_id == 'devshop_project_node_form') {
    $form['buttons']['delete']['#type'] = 'hidden'; 
  }
}
