<?php
/**
 * @file devshop_projects.module
 * a module in the DevShop module group which enables the user to create proects and group
 * sites/platforms into project groups.
 */

/**
 * Implementation of hook_hosting_tasks()
 */
function devshop_projects_hosting_tasks() {
  $tasks = array();
  $tasks['project']['devshop-create'] = array(
    'title' => t('Create Project'),
    'description' => t('Clones the repo, and creates the platforms.'),
  );
  return $tasks;
}

/**
 * Implements hook_hosting_project_context_options()
 * 
 * This transfers data from the node to the aegir context object (the alias!)
 * For project entities.
 */
function devshop_projects_hosting_project_context_options(&$task) {
  $task->context_options['server'] = '@server_master';
  $task->context_options['project_name'] = $task->ref->title;
  $task->context_options['install_profile'] = $task->ref->install_profile;
  $task->context_options['code_path'] = trim($task->ref->code_path, " ");
  if ($task->ref->git_url) {
    $task->context_options['git_url'] = $task->ref->git_url;
  }
}

/**
 * Implements hook_hosting_site_context_options()
 * 
 * This transfers data from the node to the aegir context object (the alias!)
 * For site entities.
 */
function devshop_projects_hosting_site_context_options(&$task) {
  $task->context_options['project'] = $task->ref->git_url;
}

/**
 * Implements hook_hosting_site_context_options()
 * 
 * This transfers data from the node to the aegir context object (the alias!)
 * For site entities.
 */
function devshop_projects_hosting_platform_context_options(&$task) {
  $task->context_options['project'] = $task->ref->project;
}

/**
 * Implementation of hook_perm()
 */
function devshop_projects_perm() {
  return array(
    'view projects',
  );
}

/**
 * Implementation of hook_node_info().
 */
function devshop_projects_node_info() {
  #configuration
  $types["project"] =  array(
    "type" => 'devshop_project', 
    "name" => 'DevShop Project',
    "module" => 'devshop_projects',
    "has_title" => TRUE,
    "title_label" => t('Project Codename'),
    "description" => t('Create a project'),
    "has_body" => 0, 
    "body_label" => '', 
    "min_word_count" => 0
    );

  return $types;
}

/**
 * Implementation of hook_menu()
 */
function devshop_projects_menu() {

  $items['hosting/projects'] = array(
    'title' => 'Projects',
    'description' => 'Display a list of all projects',
    'page callback' => 'devshop_projects_projects_view',
    'access arguments' => array('view projects'),
  );

  $items['hosting/projects/detail/%'] = array(
    'title' => 'Projects Details',
    'description' => 'Display details of a projects',
    'page callback' => 'devshop_projects_project_detail',
    'access arguments' => array('view projects'),
  );

  return ($items);
}

/*
 * Callback that is invoked when the user points the brower to
 * hosting/projects. It displays a nice tabulated list of projects
 * and cool thing you can do with them.
 */

function devshop_projects_projects_view() {

  $header = array('Projects', 'Sites');

  $r = db_query("SELECT * FROM {hosting_devshop_project}");
  $rows = array();

  while(($proj = db_fetch_object($r))) {
    $node = node_load($proj->nid);
    $row = array();
    $row[] = l($node->title, "node/$proj->nid");
    $row[] = db_result(db_query("SELECT COUNT(*) FROM {hosting_devshop_project_object} WHERE project_nid = %d", $node->nid));
    $rows[] = $row;
  }

  $output = theme('table', $header, $rows, array('class' => 'hosting-table'));
  $output .= l(t('Create a new project?'), 'node/add/project');
  return $output;
}

/**
 * Create a form for building a list of projects.
 */
function devshop_projects_projects_list_form($form_state, $filter_by = NULL, $filter_value = NULL) {
 
  return array();
} 

/**
 * hook_nodeapi()
 */
function devshop_projects_nodeapi(&$node, $op, $a3 = null) {

  if ($node->type == 'platform'){
    // On insert of a platform, determine project and save to hosting_devshop_project_objects
    if ($op == 'insert') {
      $path = explode('/', $node->publish_path); 
      $environment = array_pop($path);
      $project_path = implode('/', $path);
      
      $project = devshop_project_load_by_path($project_path);
  
      // Save to table
      db_query('INSERT INTO {hosting_devshop_project_object} (project_nid, object_nid, object_type, env_type) VALUES (%d, %d, "%s", "%s")', $project->nid, $node->nid, $node->type, $environment);
    }
    
    // Load Platform
    if ($op == 'load'){
      $data = db_fetch_array(db_query('SELECT * FROM {hosting_devshop_project_object} WHERE object_nid = %d', $node->nid));
      return $data;
    }
    
    // View Platform
    if ($op == 'view'){
      $project = node_load($node->project_nid);
      $node->content['info']['project'] = array(
	'#type' => 'item',
	'#title' => t('Project'),
	'#value' => l($project->title, "node/$project->nid"),
	'#weight' => -10
      );
      return $data;
    }
  }
}

/**
 * Helper to load a project node by path
 */
function devshop_project_load_by_path($project_path){
  $nid = db_result(db_query('SELECT nid FROM {hosting_devshop_project} WHERE code_path = "%s"', array($project_path)));
  return node_load($nid);
}
 
 
/**
 * Implements hook_form_alter().
 */
function devshop_projects_form_alter(&$form, &$form_state, $form_id){
  
  // Removing unneccesary fieldgroups
  if ($form_id == 'project_node_form'){
    unset($form['menu']);
    unset($form['revision_information']);
    unset($form['author']);
    unset($form['options']);
  }
}

/**
 * Implementation of hook_form().
 */
function devshop_projects_form(&$node) {

  $form['git_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Git URL'),
    '#required' => TRUE,
    '#description' => t(''),
    '#required' => TRUE,
    '#size' => 40,
    '#default_value' => $node->git_url,
    '#maxlength' => 255,
    '#weight' => 1,
  );
  $form['title'] = array(
    '#type' => 'textfield',
     '#title' => t('Project Code Name'),
     '#required' => TRUE,
     '#description' => t('Choose a unique name for your project.'),
     '#size' => 40,
     '#default_value' => $node->title,
     '#maxlength' => 255,
  );
  $form['code_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Code path'),
    '#description' => t('The absolute path on the filesystem that will be used to create the platform in the directory specified above.'),
    '#required' => TRUE,
    '#size' => 40,
    '#default_value' => $node->code_path,
    '#maxlength' => 255,
    '#weight' => 2,
  );
  $form['base_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Primary Domain'),
    '#description' => t('The domain name all sites will be built under.'),
    '#required' => TRUE,
    '#size' => 40,
    '#default_value' => $node->base_url,
    '#maxlength' => 255,
    '#weight' => 2,
  );
  
  // Don't allow editing
  if ($node->nid) {
    $form['code_path']['#type'] = $form['title']['#type'] = $form['git_url']['#type'] = 'item';
    $form['code_path']['#value'] = $form['code_path']['#default_value'];
    $form['title']['#value'] = $form['title']['#default_value'];
    $form['git_url']['#value'] = $form['git_url']['#default_value'];
  }
  
  //@TODO: Remove.  I think that instead, we should let the script create the platforms.
  //  We have to pause at that point anyway, so the user can choose the available install profiles for their three sites.
  //  Lets let provision-devshop-create import all three platforms and verify, then let the users MIGRATE their existing
  //  sites ONTO the new platforms, IF they wish.  In my opinion, migration of the old sites to our automatically built
  //  platforms is a better way to go.
  //
//
//  $sites = array(0 => 'None');
//  $r = db_query("SELECT n.nid, n.title FROM {node} AS n " .
//       		"LEFT JOIN {hosting_site} AS h ON n.nid = h.nid " .
//		"WHERE n.type = 'site' AND h.status = 1 " .
//		"ORDER BY n.title ASC");
//
//  while($sa = db_fetch_object($r)) {
//    $sites[$sa->nid] = $sa->title;
//  }
//
//  $form['dev_site'] = array(
//    '#type' => 'select',
//    '#title' => t('DEV Site'),
//    '#options' => $sites,
//    '#description' => t('Select site that is going to be your development site.'),
//    '#default_value' => $node->dev_site,
//    '#weight' => 20,
//  );
//
//  $form['test_site'] = array(
//    '#type' => 'select',
//    '#title' => t('TEST Site'),
//    '#options' => $sites,
//    '#description' => t('Select site that is going to be your test site.'),
//    '#default_value' => $node->test_site,
//    '#weight' => 21,
//  );
//
//  $form['live_site'] = array(
//    '#type' => 'select',
//    '#title' => t('LIVE Site'),
//    '#options' => $sites,
//    '#description' => t('Select site that is going to be your live site.'),
//    '#default_value' => $node->live_site,
//    '#weight' => 22,
//  );

  return $form;
}
//
///**
// * Insert the sites into the sites table
// */
//function _devshop_projects_insert_sites($node) {
//
//  foreach(array('dev_site' => 'dev', 
//                'test_site' => 'test', 
//                'live_site' => 'live') as $k => $v) {
//    if($node->$k) {
//      $snode = node_load($node->$k);
//      db_query("INSERT INTO {hosting_devshop_project_sites} " .
//               "(nid, site_nid, platform_nid, env_type) " .
//	       "VALUES (%d, %d, %d, '%s')",
//	       $node->nid, $node->$k, $snode->platform, $v);
//    }
//  }
//}

/**
 * Implementation of hook_insert().
 */
function devshop_projects_insert($node) {

  db_query("INSERT INTO {hosting_devshop_project} (nid, git_url, code_path, base_url) ".
  	   "VALUES (%d, '%s', '%s', '%s')",
	   $node->nid, $node->git_url, hosting_path_normalize($node->code_path), $node->base_url);
//  _devshop_projects_insert_sites($node);

  // Save hosting context
  if ((!$node->old_vid)) {
    hosting_context_register($node->nid, ($node->hosting_name) ? $node->hosting_name : $node->title);
  }
  
  // Create hostmaster task
  hosting_add_task($node->nid, 'devshop-create');
}

/**
 * Implementation of hook_delete().
 */
function devshop_projects_delete($node) {
  db_query('DELETE FROM {hosting_devshop_project} WHERE nid = %d', $node->nid);
  db_query('DELETE FROM {hosting_devshop_project_object} WHERE project_nid = %d', $node->nid);
  
  hosting_context_delete($node->nid);
}

/**
 * Implementation of hook_validate().
 */
function devshop_projects_validate($node, &$form) {
  // No validation if op == Delete
  if ($node->op == t('Delete')) {
    return;
  }

  // Full validation on when a creating a new node
  $add = (arg(1) == 'add' ? TRUE : FALSE);

  // Title (project code) must not have any spaces
  if(strpos($node->title, ' ') != FALSE) {
    form_set_error('title', t('Project code name must not contain any white spaces.'));
  }

  // The project code name must not be in the hosting_context table
  if ($result = db_fetch_object(db_query("SELECT name FROM {hosting_context} WHERE name = '%s'", $node->title))) {
    form_set_error('title', t('Project code name existing in hosting context table.'));
  }

  // The project code name must be unique
  if ($result = db_fetch_object(db_query("SELECT title FROM {node} WHERE title = '%s' AND type = 'devshop_project' AND	nid <> %d", $node->title, $node->nid))) {
    form_set_error('title', t('Project code name is already is use by another project'));
  }

  // Make sure the path is unique. 
  $cp = hosting_path_normalize($node->code_path);
  if ($add && $result = db_fetch_object(db_query("SELECT code_path FROM {hosting_devshop_project} WHERE code_path = '%s' AND nid <> %d", $cp, $node->nid))) {
    form_set_error('code_path', t('Code path is already in use by another project'));
  }

  // Directory must not exist
  if ($add && file_exists($cp)) {
    form_set_error('code_path', t('Code path directory already exists.'));
  }

  // Sites may not be used in more than one environement
  if($node->dev_site != 0 && $node->dev_site == $node->test_site) {
    form_set_error('dev_site', t('Site used more than once.'));
    form_set_error('test_site', t('Site used more than once.'));
  }

  if($node->dev_site != 0 && $node->dev_site == $node->live_site) {
    form_set_error('dev_site', t('Site used more than once.'));
    form_set_error('live_site', t('Site used more than once.'));
  }

  if($node->test_site != 0 && $node->test_site == $node->live_site) {
    form_set_error('test_site', t('Site used more than once.'));
    form_set_error('live_site', t('Site used more than once.'));
  }
}

/**
 * Implementation of hook_load().
 *
 * @param node
 *    Node object
 */
function devshop_projects_load($node) {
  $additions = db_fetch_array(db_query('SELECT git_url, code_path, base_url, install_profile ' .
                                        'FROM {hosting_devshop_project} ' .
                                        'WHERE nid = %d', $node->nid));
  $hosting_name = db_fetch_array(db_query("SELECT name AS hosting_name FROM {hosting_context} WHERE nid = %d", $node->nid));
  if (is_array($hosting_name) && is_array($additions)) {
    $hosting_name['hosting_name'] = 'project_' . $hosting_name['hosting_name'];
    $additions += $hosting_name;
  }
  
  $query = db_query("SELECT * FROM {hosting_devshop_project_object} WHERE project_nid = %d", $node->nid);

  $objects = array();
  while($project_object = db_fetch_object($query)) {
    $objects[$project_object->object_type][$project_object->object_nid] = $project_object->env_type;
  }
  $additions['project_objects'] = $objects;
  return $additions;
}

/**
 * Implementation of hook_view().
 */
function devshop_projects_view($node, $teaser = FALSE, $page = FALSE) {
  modalframe_parent_js();

  $node->content['info'] = array(
    '#prefix' => '<div id="hosting-platform-info">',
    '#suffix' => '</div>'
  );

  $node->content['info']['git_url'] = array(
    '#type' => 'item',
    '#title' => t('Git URL'),
    '#value' => $node->git_url,
    '#weight' => -10
  );

  $node->content['info']['code_path'] = array(
    '#type' => 'item',
    '#title' => t('Code path'),
    '#value' => filter_xss($node->code_path),
    '#weight' => -8
  );
  $url = 'http://' . $node->base_url;
  $node->content['info']['base_url'] = array(
    '#type' => 'item',
    '#title' => t('Base URL'),
    '#value' => l($url, $url),
    '#weight' => -10
  );
  
  if (!empty($node->install_profile)){
    $node->content['info']['install_profile'] = array(
      '#type' => 'item',
      '#title' => t('Install profile'),
      '#value' => ($node->install_profile),
      '#weight' => -8
    );
  }
  foreach($node->project_objects as $type => $objects) {
    $header = array($type ."s");
    $rows = array();
    foreach($objects as $nid => $object) {
      $object = node_load($nid);
      $row = array(l($object->title, "node/$object->nid"));
      $rows[] = $row;
      
    }
    $table = theme('table', $header, $rows);

    $node->content['info'][$type] = array(
      '#type' => 'item',
      '#value' => $table,
    );    
  }
  
  // MAIN DISPLAY
  
  //If there are no sites yet, we must display the install form.
  if (!isset($node->project_objects['site'])){
    
    // Site install form
    $node->content['install'] =array(
      '#type' => 'item',
      '#value' => drupal_get_form('devshop_projects_install_sites_form', $node),
    );
    
    
  }

    
  return $node;
}

/**
 *  Form for site installation
 */
function devshop_projects_install_sites_form($form_state, $project_node) {
  
    $form = array();
    
    //Bail if no platforms yet.
    if (!isset($project_node->project_objects['platform'])){
      $form['note'] = array(
	'#type' => 'item',
	'#title' => t('Clone & Verify'),
	'#value' => t('Your code is on its way to the server.  Once the platforms verify, you can choose an installation profile.'),
      );
      return $form;
    }
    // Bail if project doesn't have sites and already has install profile
    if (!isset($project_node->project_objects['site']) && isset($project_node->install_profile)){
      $form['note'] = array(
	'#type' => 'item',
	'#title' => t('Sites Install'),
	'#value' => t('Your Live, Dev, and Test sites are being installed.'),
      );
      return $form;
    }
    
    // Load all install profiles found on dev platform
    $platform_nid = key($project_node->project_objects['platform']);
    
    $form['ready'] = array(
      '#type' => 'item',
      '#value' => t("Your project's code is ready!  Now you must create your sites."),
    );
    
    $profiles = array_combine(hosting_get_profiles($platform_nid, 'short_name'), hosting_get_profiles($platform_nid));

    $form['install_profile'] = array(
      '#type' => 'radios',
      '#title' => t('Choose your install profile'),
      '#options' => $profiles,
    );
    $form['nid'] = array(
      '#type' => 'value',
      '#value' => $project_node->nid,  
    );
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Create dev, test, and live sites'),  
    );
    return $form;
}

/**
 * Validates for site installation
 */
function devshop_projects_install_sites_form_validate(&$form, &$form_state){
  if (empty($form_state['values']['install_profile'])){
    form_set_error('install_profile', t('You must choose an install profile'));
  }
  
  
}
/**
 * Submit for site installation
 *
 * I believe, based on the fact that provision has to create
 * the site aliases before it runs provision-install, we have
 * to have a new hostmaster task here.
 *
 * If we save the install_profile in the project context,
 * the task could easily create the new sites.
 */
function devshop_projects_install_sites_form_submit(&$form, &$form_state){
  $node = node_load($form_state['values']['nid']);

  // Save installation profile to database
  db_query('UPDATE {hosting_devshop_project} SET install_profile = "%s" WHERE nid = %d', $form_state['values']['install_profile'], $node->nid);
  
  // @TODO: Save a "save-project" task that saves the installation
  // profile to the project context.
  // hostmaster_add_task($form_state['values']['nid'], 'devshop-save-project', )
}

/**
 * Status display
 */
function devshop_projects_project_status(){
  
  if ($create_task_exists) {
    $msg = t('Git Cloning...');
  } elseif ($platforms_exist) {
    $msg = t('Verifying Platforms...');
  } elseif ($platforms_verified) {
    $msg = t('Platforms Verified!');
    $msg .= drupal_get_form('devshop_projects_project_site_install');
  } else {
    $msg = t('@TODO');
  }
  
  return $msg;
}


function devshop_projects_project_detail() {

  $nid = arg(3); // ok, I'm cheating
  if(!($node = node_load($nid)) || $node->type != 'devshop_project') {
    return t('Project not found!');
  }

  return "hello";
}
