<?php

/**
 * @file devshop_projects.module
 *
 * Provides Node Type, UI, and tools for DevShop Projects.
 */

include_once('inc/forms.inc');
include_once('inc/nodes.inc');
include_once('inc/tasks.inc');

// Lets keep front end code here.
include_once('inc/ui.inc');

/**
 * Implementation of hook_perm()
 *
 * Since we have a node type, "create project content permission is
 * automatically added by Drupal
 */
function devshop_projects_perm() {
  return array(
    'view projects',
    'delete project'
  );
}

/**
 * Implementation of hook_menu()
 */
function devshop_projects_menu() {

  $items['hosting/projects'] = array(
    'title' => 'Projects',
    'description' => 'Display a list of all projects',
    'page callback' => 'devshop_projects_projects_view',
    'access arguments' => array('view projects'),
    'menu_name' => 'primary-links',
    'weight' => 1,
  );
  
  
  // hosting tasks ajax pages.
  // @TODO: This doesn't work and is making me very angry!
  foreach (hosting_available_tasks('project') as $task => $info){
    $path = 'node/%/project_' . $task;
    $items[$path] = array(
      'title' => $info['title'],
      'description' => $info['description'],
      'page callback' => 'devshop_projects_hosting_task_confirm_form_page',
      'page arguments' => array(1, $task),
      'access callback' => 'hosting_task_menu_access_csrf',
      'access arguments' => array(1, $task),
      'type' => MENU_CALLBACK,
    );
    $items[$path] = array_merge($items[$path], $info);
  }
  return ($items);
}

function devshop_projects_hosting_task_confirm_form_page($nid, $task){
  $node = node_load($nid);
  return drupal_get_form('hosting_task_confirm_form', $node, $task);
}
/**
 * Implementation of hook_menu_alter()
 *
 * Replaces node/add/project with a ctools wizard.
 */
function devshop_projects_menu_alter(&$items) {
  $items['node/add/project']['page callback'] = 'devshop_projects_create_wizard';
  $items['node/add/project']['page arguments'] = array(3);
  $items['node/add/project']['file'] = 'create-wizard.inc';
  $items['node/add/project']['file path'] = drupal_get_path('module', 'devshop_projects') . '/inc';
}


/**
 * Task access controls
 *
 * This function defines which tasks should be showed to the user but
 * especially which will be accessible to him, in the permissions system.
 *
 * @arg $node object
 *   the node object we're trying to access
 *
 * @arg $task string
 *   the task type we're trying to do on the $node
 *
 * @see hosting_task_menu()
 */
function devshop_hosting_task_menu_access($node, $task) {
  if (!isset($node->nid)){
    $node = node_load($node);
  }
  if (user_access("create " . $task . " task")) {
    if ($node->type == 'project') {
      return TRUE;
    }
  }
}

/**
 * Status of Project
 *
 * @param $node
 *   a project node
 */
function devshop_project_status($node){
  
  //Project status
  $platforms_ready = TRUE;
  $sites_ready = TRUE;
  $sites_installing = FALSE;

  // PLATFORMS STATUS: Determine if all platforms are verified.
  if (isset($node->project_objects['platform'])){
    foreach ($node->project_objects['platform'] as $nid => $env){
      $platform_nodes[$env] = node_load($nid);
      if (!empty($platform_nodes[$env]) && $platform_nodes[$env]->platform_status == 0){
        $platforms_ready = FALSE;
      }
    }
  } else {
    $platforms_ready = FALSE;
  }
  // SITES STATUS: Determine if sites exist and are enabled
  if ($platforms_ready && isset($node->project_objects['site'])){
    foreach ($node->project_objects['site'] as $nid => $env){
      $site_nodes[$env] = node_load($nid);
      if ($site_nodes[$env]->site_status == 0){
        $sites_ready = FALSE;
        $sites_installing = TRUE;
      }
    }
  } else {
    $sites_ready = FALSE;
  }

  return $sites_ready? 'sites_ready': (
    $sites_installing? 'sites_installing': (
      $platforms_ready? 'platforms_ready': 'platforms_verifying'
    )
  );
}

/**
 * Implements hook_hosting_drush_aliases_name()
 *
 * See http://drupal.org/project/hosting_drush_aliases
 */
function devshop_projects_hosting_drush_aliases_name($node) {
  if (isset($node->project_name)){
    return $node->project_name .".". $node->project_environment;
  }
}
//
///*
// * Helper function to create a site in a project
// */
//function devshop_projects_create_site($project_node, $platform_node, $env) {
//
//  global $user;
//    
//  // Create the site nodes
//  $node = new stdClass();
//  $node->type = 'site';
//  $node->status = 1;
//  $node->uid = $user->uid;
//  $node->title = $env .'.'. $project_node->base_url;
//
//  // Aegir properties
//  // @TODO: better client support
//  $node->client = HOSTING_DEFAULT_CLIENT;  
//  $node->db_server = db_result(db_query('SELECT nid FROM {hosting_db_server}'));
//    
//  $node->platform = $platform_node->nid;
//  $node->profile = db_result(db_query('SELECT nid FROM {hosting_package} WHERE short_name = "%s"', $project_node->install_profile));
//    
//  //$node->port  = db_result(db_query("SELECT ports FROM {hosting_platform} p WHERE p.nid = %d", $nid));
//    
//  // @TODO: Improve site language handling?
//  $node->site_language = !empty($user->language)? $user->language: 'en';
//
//  // Save the node
//  if ($node = node_submit($node)) {
//    node_save($node);
//      
//    //And save the association to the project
//    db_query('INSERT INTO {hosting_devshop_project_object} (project_nid, object_nid, object_type, env_type) VALUES (%d, %d, "%s", "%s")', $project_node->nid, $node->nid, $node->type, $env);
//  }
//}

///**
// * Helper function which writes a serialize array in the project file
// */
//function devshop_projects_project_data_set($nid, $data) {
//  db_query("UPDATE {hosting_devshop_project} SET data = '%s' WHERE nid = %d",
//	   serialize($data), $nid);
//}
//
///**
// * Helper function which reads the serialize array in the project file
// */
//function devshop_projects_project_data_get($nid) {
//
//  $sdata = db_result(db_query("SELECT data FROM {hosting_devshop_project} " .
//			     "WHERE nid = %d", $nid));
//
//  if (!$sdata || strlen($sdata) < 1) {
//    $data = array();
//  }
//  else {
//    $data = unserialize($sdata);
//  }
//
//  return $data;
//}



