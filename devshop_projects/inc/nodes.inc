<?php
/**
 * @file devshop_project.node.inc
 *
 * DevShop Project Node related hooks and support functions.
 *
 */

/**
 * Implementation of hook_node_info().
 */
function devshop_projects_node_info() {
  $types["project"] =  array(
    "type" => 'project',
    "name" => 'DevShop Project',
    "module" => 'devshop_projects',
    "has_title" => TRUE,
    "title_label" => t('Project Codename'),
    "description" => t('Create a project'),
    "has_body" => 0,
    "body_label" => '',
    "min_word_count" => 0
  );
  return $types;
}


/**
 * Implementation of hook_load().
 *
 * Loads data for project and environments.
 *
 * @param node
 *    Node object
 */
function devshop_projects_load($node) {

  // Load the "hosting context". The unique name in the aegir system.
  $name = db_result(db_query("SELECT name AS hosting_name FROM {hosting_context} WHERE nid = %d", $node->nid));
  $additions['hosting_name'] = 'project_' . $name;

  // Load project data
  $project = db_fetch_object(db_query('SELECT * FROM {hosting_devshop_project} WHERE nid = %d', $node->nid));

  // Load up all project settings.
  $project->name = $name;
  $project->settings = (object) unserialize($project->settings);

  // Load Environments
  // @TODO: Remove environments where the site has been deleted.
  $query = db_query("
    SELECT
        e.*,
        s.status as site_status,
        p.status as platform_status,
        http.title as web_server,
        db.title as db_server,
        n.title as project_name,
        s.vid,
        sn.title as default_domain
      FROM {hosting_devshop_project_environment} e
      LEFT JOIN {hosting_site} s ON e.site = s.nid
      LEFT JOIN {node} sn ON s.vid = sn.vid
      LEFT JOIN {hosting_platform} p ON e.platform = p.nid
      LEFT JOIN {node} http ON p.web_server = http.nid
      LEFT JOIN {node} db ON s.db_server = db.nid
      LEFT JOIN {node} n ON e.project_nid = n.nid
      WHERE project_nid = %d
      ORDER BY name;   ", $node->nid);
  $environments = array();
  while ($environment = db_fetch_object($query)) {

    // Skip this if it is not enabled.
    if ($environment->site_status == HOSTING_SITE_DELETED && $environment->platform_status == HOSTING_PLATFORM_DELETED) {
      continue;
    }

    // Save to environments array
    $environment->settings = (object) unserialize($environment->settings);

    // Environments URL:
    // @TODO: Check for http or https.
    // @TODO: Load a login URL if available.
    $environment->url = 'http://' . $environment->default_domain;
    $environment->git_ref_type = $project->settings->git['refs'][$environment->git_ref];

    // Environment version
    $iid = db_result(db_query("SELECT iid FROM {hosting_package_instance} i left join {hosting_package} p on p.nid=i.package_id WHERE p.package_type='platform' AND i.rid=%d", $environment->platform));
    $release = hosting_package_instance_load($iid);
    $environment->version = $release->version;

    // Get extra server info
    $environment->servers['http'] = array(
      'nid' => $environment->settings->web_server,
      'name' => $environment->web_server
    );

    // HTTP Server
    $environment->servers['db'] = array(
      'nid' => $environment->settings->db_server,
      'name' => $environment->db_server
    );

    // Last commit
    $path = $project->code_path . '/' . $environment->name;
//    $environment->git_current = shell_exec("cd $path; git log --pretty=format:'<b>%h</b> <i>%an</i> <small>%ar</small><br /> <small >%s</small>' HEAD^...HEAD");
    $environment->git_current = shell_exec("cd $path; git log --pretty=format:'<b>%h</b> <i>%an</i> <small>%ar</small>' --max-count=1");

    if (empty($environment->git_current)){
      $environment->git_current = t('Cloning in progress...');
    }

    // Get Domain aliases
    $environment->domains = hosting_alias_get_aliases($environment);
    array_unshift($environment->domains, $environment->default_domain);

    // Save to project environments collection.
    $environments[$environment->name] = $environment;
  }

  // Put live environment at the top.
  if ($project->settings->live['live_environment']) {
    $live_env = $project->settings->live['live_environment'];
    $project->environments = array();
    $project->environments[$live_env] = $environments[$live_env];
    unset($environments[$live_env]);
    $project->environments += $environments;
  }
  else {
    $project->environments = $environments;
  }

  // Make project name and status available.
  $project->name = $node->title;
  $project->status = $node->status;

  // Save project object be available at $node->project.
  $additions['project'] = $project;

  // Load verification status
  $task = db_fetch_object(db_query('SELECT * FROM {hosting_task} WHERE rid = %d ORDER BY vid DESC', $node->nid));
  $task->task_status = (int) $task->task_status;
  $additions['verify'] = $task;

  return $additions;
}

/**
 * Implementation of hook_insert().
 *
 *   1. Saves data into our table.
 *   2. Saves a hosting context name.
 *   3. Adds a "Verify" task for this project.
 *
 *  @see hosting_platform_insert()
 */
function devshop_projects_insert($node) {

  if (!isset($node->no_verify)) {
    hosting_add_task($node->nid, 'verify');
  }
  
  $info = new stdClass();
  $info->nid = $node->nid;
  $info->git_url = $node->project->git_url;
  $info->code_path = hosting_path_normalize($node->project->code_path);
  $info->drupal_path = hosting_path_normalize($node->project->drupal_path);
  $info->base_url = $node->project->base_url;
  $info->install_profile = $node->project->install_profile;

  // Save serialized data, minus environments
  $info->settings = serialize($node->project->settings);

  drupal_write_record('hosting_devshop_project', $info);

  // Save hosting context
  if (!$node->old_vid) {
    hosting_context_register($node->nid, ($node->hosting_name) ? $node->hosting_name : $node->title);
  }

  // @TODO: The wizard always creates the project before the environments.
  // Not sure if we need this, but we might to enable importing via drush.
  // Save Environment records.
  if (!empty($node->project->environments)) {
    foreach ($node->project->environments as $name => $environment){
      // Ensure correct data types
      $environment = (object) $environment;
      $environment->settings = (array) $environment->settings;

      $info = new stdClass();
      $info->project_nid = $node->nid;
      $info->name = $name;
      $info->git_ref = $environment->git_ref;
      $info->site = $environment->site;
      $info->platform = $environment->platform;

      // Remove primary settings from settings array before saving.
      unset($environment->settings['git_ref']);
      unset($environment->settings['site']);
      unset($environment->settings['platform']);
      $info->settings = serialize($environment->settings);

      // Save environment record.
      drupal_write_record('hosting_devshop_project_environment', $info);
    }
  }
}

/**
 * Implementation of hook_update().
 *
 *  1. Updates our table.
 *  2. Adds a "Verify" task for this project.
 *
 */
function devshop_projects_update($node) {

  if (!isset($node->no_verify) || $node->no_verify == FALSE) {
    hosting_add_task($node->nid, 'verify');
  }

  $project = (object) $node->project;
  $project->settings = (object) $project->settings;

  $info = new stdClass();
  $info->nid = $node->nid;
  $info->git_url = $project->git_url;
  $info->code_path = hosting_path_normalize($project->code_path);
  $info->drupal_path = hosting_path_normalize($project->drupal_path);
  $info->base_url = $project->base_url;
  $info->install_profile = $project->install_profile;

  // Save serialized data, minus environments
  $info->settings = serialize($project->settings);

  // Write project record.
  drupal_write_record('hosting_devshop_project', $info, 'nid');

  // Update the project environments domain aliases based on the live settings.
  devshop_project_update_domains($node);
}

/**
 * Function for updating a project's alias
 */
function devshop_project_update_domains($project_node) {
  $project = $project_node->project;
  $old_project = $project_node->old->project;

  // If there is a live environment, AND live domain was entered:
  if ($project->settings->live['live_environment'] && $project->settings->live['live_domain']) {

    // ...and if the Live Domain changed:
    if ($project->settings->live['live_domain'] != $old_project->settings->live['live_domain']) {

      // Save live domain alias to the live environment
      $live_environment = $project->settings->live['live_environment'];
      $live_site_node = node_load($project->environment[$live_environment]->site);
      devshop_hosting_save_domain($project->settings->live['live_domain'], $live_site_node);

      // Save live domain alias with www prefix.
      if ($project->settings->live['live_domain_www']) {
        devshop_hosting_save_domain('www.' . $project->settings->live['live_domain'], $live_site_node);
      }

      // Delete all the old live domain aliases for all environments, and save new ones.
      $project_node_loaded = node_load($project_node->nid);
      foreach ($project_node_loaded->project['environments'] as $name => $environment) {
        $site_node = node_load($project->environment[$live_environment]->site);

        devshop_hosting_delete_domain($name . "." . $project->settings->live['live_domain'], $site_node);
        devshop_hosting_save_domain($name . "." . $project->settings->live['live_domain'], $site_node);
      }
    }

    // ... or if the Live Environment changed.
    if ($project->settings->live['live_environment'] != $old_project->settings->live['live_environment']) {
      $live_environment = $project->settings->live['live_environment'];
      $live_site_node = node_load($project->environment[$live_environment]->site);

      $old_live_environment = $old_project->settings->live['live_environment'];
      $old_live_site_node = node_load($project->environment[$old_live_environment]->site);

      // If the live domain also changed, delete the old domain from the old environment).
      if ($project->settings->live['live_domain'] != $old_project->settings->live['live_domain']) {
        devshop_hosting_delete_domain($old_project->settings->live['live_domain'], $old_live_site_node);

        // If project had www aliases, delete that alias as well.
        if ($old_project->settings->live['live_domain_www']) {
          devshop_hosting_delete_domain("www." . $old_project->settings->live['live_domain'], $old_live_site_node);
        }
      }
      // ... if the live domain did not change, delete the current live domain alias.
      else {
        devshop_hosting_delete_domain($project->settings->live['live_domain'], $live_site_node);
        if ($old_project->settings->live['live_domain_www']) {
          devshop_hosting_delete_domain("www." . $old_project->settings->live['live_domain'], $live_site_node);
        }
      }

      // Save the domain aliases to the new live environment
      devshop_hosting_save_domain($project->settings->live['live_domain'], $live_site_node);
      if ($project->settings->live['live_domain_www']) {
        devshop_hosting_save_domain("www." . $project->settings->live['live_domain'], $live_site_node);
      }
    }
  }
}

/**
 * Implementation of hook_delete().
 */
function devshop_projects_delete($node) {

  db_query('DELETE FROM {hosting_devshop_project} WHERE nid = %d', $node->nid);
  db_query('DELETE FROM {hosting_devshop_project_environment} WHERE project_nid = %d', $node->nid);

  hosting_context_delete($node->nid);
}



/**
 * Implementation of hook_nodeapi()
 * For site and platform nodes, load project and environment objects.
 *
 * @see devshop_projects_load()
 */
function devshop_projects_nodeapi(&$node, $op, $a3 = null) {

  // Load environment info into platforms and sites.
  if ($op == 'load' && $node->type == 'platform' || $node->type == 'site') {
    $additions = array();
    $result = db_fetch_object(db_query("SELECT project_nid, name FROM {hosting_devshop_project_environment} e WHERE {$node->type} = %d", $node->nid));

    // Load project and environment
    $project_node = node_load($result->project_nid);
    $additions['project'] = $project_node->project;
    $additions['environment'] = $project_node->project->environments[$result->name];
    return $additions;
  }

  // When creating a site, look for project live domain setting, and
  // "environment subdomains" setting to save domain aliases.
  if ($op == 'insert' && $node->type == 'site') {

    $result = db_fetch_object(db_query('
      SELECT p.settings, e.name AS environment FROM {hosting_devshop_project} p
        LEFT JOIN {hosting_devshop_project_environment} e ON p.nid = e.project_nid
        WHERE e.site = %d
        ', $node->nid));

    $settings = unserialize($result->settings);
    $environment = $result->environment;

    // Bail out if no environment name found.
    if (empty($result->name)) {
      return;
    }

    $aliases = array();

    // If environment subdomains are enabled...
    if ($settings->live->environment_aliases) {
      $aliases[] = $environment . "." . $settings->live->live_environment;
    }
  }

  // Save aliases if the are allowed.
  foreach ($aliases as $alias) {
    devshop_hosting_save_domain($alias, $node);
  }
}

/**
 * Helper for saving a site domain for a site, includes the allow check.
 */
function devshop_hosting_save_domain($alias, $site) {
  if (hosting_domain_allowed($alias, array('nid' => $site->nid)) && $alias != $site->title) {
    db_query("INSERT INTO {hosting_site_alias} (vid, nid, alias, automatic, redirection) VALUES (%d, %d, '%s', %d, '%s')", $site->vid, $site->nid, $alias, HOSTING_ALIAS_CUSTOM, '');
  }
}

/**
 * Helper for deleting a site domain for a site, includes the allow check.
 */
function devshop_hosting_delete_domain($alias, $site) {
  db_query("DELETE FROM {hosting_site_alias} WHERE vid = %d AND alias = '%s';", $site->vid, $alias);
}
