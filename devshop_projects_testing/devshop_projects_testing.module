<?php

/**
 * @file devshop_projects.module
 * a module in the DevShop module group which enables the user to create 
 * proects and group sites/platforms into project groups.
 */

/**
 * Implementation of hook_perm()
 */
function devshop_projects_testing_perm() {
  return array(
    'run project tests',
  );
}

/**
 * Implements hook_form_alter().
 */
function devshop_projects_testing_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'project_node_form') {
    $form['tests_to_run'] = array(
      '#type' => 'textarea',
      '#title' => t('Tests To Run'),
      '#default_value' => $form['#node']->tests_to_run,
      '#rows' => 6,
      '#description' => t('Enter the names of the simpletests to run when this project receives a commit, one per line.'),
      '#weight' => 20,
    );
  }
}

/**
 * Implements hook_nodeapi()
 */
function devshop_projects_testing_nodeapi(&$node, $op, $a3 = null) {

  if ($node->type != 'project' || $a3 != null) {
    return;
  }

  switch ($op) {
  case 'load':
    $data = db_fetch_array(db_query("SELECT tests_to_run " .
				     "FROM {hosting_devshop_project_testing} ".
				     "WHERE project_nid = %d", $node->nid));
    return $data;

  case 'view':

    break;


  case 'insert':
  case 'update':
    db_query("DELETE FROM {hosting_devshop_project_testing} " .
	     "WHERE project_nid = %d", $node->nid);

    db_query("INSERT INTO {hosting_devshop_project_testing} " .
	     "(project_nid, tests_to_run) " .
	     "VALUES(%d, '%s')", $node->nid, $node->tests_to_run);
    break;

  case 'delete':
    db_query("DELETE FROM {hosting_devshop_project_testing} " .
	     "WHERE project_nid = %d", $node->nid);
    break;

  default:
    break;
  }

}

/**
 * Implementation of hook_hosting_tasks()
 *
 */

function devshop_projects_testing_hosting_tasks() {
  $tasks = array();

  $tasks['site']['devshop-run-tests'] = array(
    'title' => t('Run Tests'),
    'description' => t('Run a group of previousely defined SimpleTest tests.'),
    'dialog' => TRUE,
    'task_permitted' => TRUE,
  );

  return $tasks;
}

/**
 * Implementation of hook_hosting_task_TASK_TYPE_form().
 *
 * For "Commit" task.
 */

function hosting_task_devshop_run_tests_form($node) {

  if ($node->project_nid) {
    $project_node = node_load($node->project_nid);
    $tests = $project_node->tests_to_run;
  }
  else {
    $tests = "";
  }

  $form['tests_to_run'] = array(
    '#type' => 'textarea',
    '#title' => t('Tests To Run'),
    '#value' => $tests,
    '#default_value' => $tests,
    '#rows' => 6,
    '#description' => t('Enter the names of the simpletests to run when this project receives a commit, one per line.'),
    );

  $form['sync'] = array(
    '#type' => 'checkbox',
    '#title' => t("Sync from Live before testing?"),
    '#default_value' => FALSE,
  );

  return $form;
}
