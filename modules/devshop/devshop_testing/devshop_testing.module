<?php

/**
 * @file devshop_projects.module
 * a module in the DevShop module group which enables the user to create 
 * proects and group sites/platforms into project groups.
 */

/**
 * Implements hook_menu()
 */
function devshop_testing_menu() {
  $items['devshop_tests/%'] = array(
    'title' => 'Test Results',
    'page callback' => 'devshop_testing_results_page',
    'page arguments' => array(1),
    'file' => 'pages.inc',
    'access arguments' => array('access test results'),
  );
  return $items;
}

/**
 * Implementation of hook_perm()
 */
function devshop_testing_perm() {
  return array(
    'create test task',
    'access test results',
  );
}

/**
 * Implementation of hook_hosting_tasks()
 */
function devshop_testing_hosting_tasks() {
  $tasks = array();

  $tasks['site']['test'] = array(
    'title' => t('Run Tests'),
    'description' => t('Run tests on the site.'),
    'dialog' => TRUE,
    'task_permitted' => TRUE,
    'access callback' => 'devshop_hosting_task_menu_access',
  );

  return $tasks;
}

/**
 * Implements hook_devshop_environment_actions().
 *
 * Defines the list of tasks that appear under the gear icon.
 */
function devshop_testing_devshop_environment_actions($environment) {
  return array(
    'test'
  );
}
/**
 * Implementation of hook_hosting_task_TASK_TYPE_form().
 *
 * Our parameters are added in devshop_testing_form_alter()
 */
function hosting_task_test_form($node) {

  $form = array();
  return $form;
}

/**
 * Implements hook_form_alter().
 */
function devshop_testing_form_alter(&$form, &$form_state, $form_id) {

  // If it's the project form, it's "defaults" for environments.
  if ($form_id == 'project_node_form') {
    $form['project']['settings']['testing'] = array(
      '#type' => 'fieldset',
      '#title' => t('Testing'),
      '#description' => t('Set the default testing settings for environments here.  Each environment can override these settings.'),
    );
    $testing_form = &$form['project']['settings']['testing'];
    $settings =  $form['#node']->project->settings;
  }

  // If it's the site (environment) form, it is the override.
  elseif ($form_id == 'site_node_form') {
    if (!isset($form['#node']->project)) {
      return;
    }
    $form['environment']['settings']['testing'] = array(
      '#type' => 'fieldset',
      '#title' => t('Testing'),
      '#description' => t('Set the testing settings for this environment.'),
      '#weight' => 100,
    );
    $testing_form = &$form['environment']['settings']['testing'];
    $settings =  $form['#node']->environment->settings;

    // Add to deploy hooks.
    $form['environment']['settings']['deploy']['test'] = array(
      '#type' => 'checkbox',
      '#title' => t('Run Tests'),
      '#description' => t('Run tests after every code deploy.'),
      '#weight' => 100,
      '#default_value' => $form['#node']->environment->settings->deploy['test'],
    );
  }
  // Run Tests Task confirm form.
  elseif ($form_id == 'hosting_task_confirm_form' && $form['task']['#value'] == 'test') {
    $testing_form = &$form['parameters'];
    $node = node_load($form['nid']['#value']);
    $settings =  $node->environment->settings;
  }
  // Deploy Code Task confirm form.
  elseif ($form_id == 'hosting_task_confirm_form' && $form['task']['#value'] == 'devshop-deploy') {
    $node = node_load($form['nid']['#value']);
    $form['parameters']['test'] = array(
      '#type' => 'checkbox',
      '#title' => t('Run Tests'),
      '#description' => t('Run tests after this code deploy.'),
      '#default_value' => $node->environment->settings->deploy['test'],
    );
    return;
  }
  else {
    return;
  }

  // Setting defaults.  Use project settings if there are any.
  if (!isset($settings->testing)) {
    if (isset($form['#node']->project->settings->testing)) {
      $settings->testing = $form['#node']->project->settings->testing;
    }
    else {
      $settings->testing = array(
        'test_type' => 0,
        'tests_to_run' => '',
        'behat_folder_path' => '',
        'behat_bin' => 'bin/behat',
      );
    }
  }
  $testing_form['test_type'] = array(
    '#title' => t('Test Type'),
    '#options' => array(
      0 => t('None'),
      'simpletest' => t('SimpleTest'),
      'behat' => t('Behat'),
    ),
    '#type' => 'radios',
    '#default_value' => $settings->testing['test_type'],
  );

  // Look for feature files.
  if (isset($form['#node'])) {

    // Project settings page.
    if ($form['#node']->type == 'project') {
      // Just grab the first one.
      $environment = array_shift($form['#node']->project->environments);
    }
    // Environment settings page.
    elseif (isset($form['#node']->environment)) {
      $environment = $form['#node']->environment;
    }
  }
  elseif ($form['#id'] == 'hosting-task-confirm-form') {
    $node = node_load(arg(1));
    $environment = $node->environment;
  }

  $tests = array();

  // Final check for repo root.
  if (empty($environment->repo_root)){
    $tests[] = 'Something is wrong. Environment not found.';
  }
  else {
    $directory = $environment->repo_root . $settings->testing['behat_folder_path'] . '/features';

    $files = file_scan_directory($directory, '.feature', array('.', '..'));

    $tests = array();
    foreach ($files as $file) {
      $value = str_replace($directory, '', $file->filename);
      $tests[$value] = $file->basename;
    }
  }

  $testing_form['tests_to_run'] = array(
    '#type' => 'checkboxes',
    '#options' => $tests,
    '#title' => t('Tests to Run'),
    '#default_value' => $settings->testing['tests_to_run'],
    '#description' => t('Select the tests you wish to run.  Leave all unchecked to run all of them.'),
  );

  $testing_form['behat_folder_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Behat folder path'),
    '#description' => t('Enter the path to your behat tests folder, relative to your git repo root.'),
    '#default_value' => $settings->testing['behat_folder_path'],
  );
  $testing_form['behat_bin_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Behat executable path'),
    '#description' => t('Enter the path to your bin/behat executable file, relative to the Behat folder path.'),
    '#default_value' => $settings->testing['behat_bin_path'],
  );

  if ($form_id == 'hosting_task_confirm_form') {
    $locked = array(
      'test_type',
      'behat_folder_path',
      'behat_bin_path',
    );
    foreach ($locked as $field){
      $testing_form[$field]['#value'] = $form['project'][$field]['#default_value'];
      $testing_form[$field]['#type'] = 'value';
    }
  }
}
//require_once 'ansi-to-html\SensioLabs\AnsiConverter\AnsiToHtmlConverter.php';
require_once __DIR__.'/ansi-to-html/vendor/autoload.php';

use SensioLabs\AnsiConverter\AnsiToHtmlConverter;

function devshop_testing_nodeapi_task_load(&$node, $a3, $a4) {
  if ($node->type == 'task' && !empty($node->task_args['test_results'])) {

    $converter = new AnsiToHtmlConverter();
    $output = $converter->convert($node->task_args['test_results']);

    $output = strtr($output, array(
      "\n" => "<br />",
      "  " => "&nbsp; ",
    ));

    $node->test_results_formatted = '<div class="test-results" style="background-color: black; padding: 2em; font-family: Consolas, Bitstream Vera Sans Mono, Courier New, Courier, monospace;">' . $output . '</div>';

  }
}

function devshop_testing_nodeapi_task_view(&$node, $a3, $a4) {

  if ($node->type == 'task' && !empty($node->task_args['test_results'])) {
    $node->content['results'] = array(
      '#type' => 'item',
      '#value' => $node->test_results_formatted,
      '#weight' => -100,
    );
  }
}

/**
 * Implements hook_preprocess_node()
 * @param $var
 */
function devshop_testing_preprocess_node(&$vars) {
  global $user;
  $node = &$vars['node'];
  if (!empty($node->project->environments)) {
    foreach ($node->project->environments as &$environment) {
      $environment->testing = TRUE;

      // Load test task.
      $task = db_fetch_object(db_query('SELECT * FROM {hosting_task} WHERE rid = %d AND task_type = "test" ORDER BY vid DESC', $environment->site));

      $environment->test = $task;
      $environment->test->task_node = node_load($environment->test->nid);
      $environment->test->duration = format_interval($task->delta, 1);
      $environment->test->permalink = url("devshop_tests/{$environment->test->nid}/{$environment->test->vid}");

      if ($task->executed) {
        $environment->test->time_ago = format_interval(time() - $task->executed, 1);
        $environment->test->ago = t('@time ago', array('@time' => $environment->test->time_ago));
      }
      $environment->test->run_tests_url = url("node/$environment->site/site_test", array('query' => array('token' => drupal_get_token($user->uid))));
      $environment->test->status_url = url('node/' . $task->nid);

      $environment->test->results = $environment->test->task_node->test_results_formatted;

      if ($environment->test->task_status == HOSTING_TASK_ERROR) {
        $environment->test->status_message = t('Failed');
        $environment->test->status_class = 'danger';
      }
      elseif ($environment->test->task_status == HOSTING_TASK_SUCCESS) {
        $environment->test->status_message = t('Passed!');
        $environment->test->status_class = 'success';
      }
      elseif ($environment->test->task_status === HOSTING_TASK_QUEUED) {
        $environment->test->status_message = t('Queued');
        $environment->test->status_class = 'default';
        $environment->test->duration = '';

      }
      elseif ($environment->test->task_status == HOSTING_TASK_PROCESSING) {
        $environment->test->status_message = t('Running...');
        $environment->test->status_class = 'default';
        $environment->test->duration = '';
      }
      elseif ($environment->test->task_status == HOSTING_TASK_WARNING) {
        $environment->test->status_message = t('Passed with Warnings');
        $environment->test->status_class = 'warning';
      }


      else {
        $environment->test->status_message = t('Ready');
        $environment->test->status_class = 'default';
        $environment->test->duration = '';
      }
    }
  }
}