name: Docker Images

on:
 push:
   branches: 1.x
 pull_request:
   types: [opened, synchronize]
 schedule:
   - cron: "0 6 * * *"

env:
  GITHUB_TOKEN: ${{ secrets.INPUT_GITHUB_TOKEN }}
  GITHUB_PR_NUMBER: ${{ github.event.pull_request.number }}
  GITHUB_PR_SHA: ${{ github.event.pull_request.head.sha  }}
  GITHUB_RUN_LOG_URL: https://github.com/opendevshop/devshop/actions/runs/${{ github.run_id }}

jobs:
  build:
    name: "Docker Build"
    # description: "This test copies the install.sh file into an empty base container and runs it, without any supporting code."
    strategy:
      fail-fast: false
      matrix:
        os:
          - 'ubuntu1804'
          - 'centos7'
    env:
      OS: "${{ matrix.os }}"
      DOCKER_DIR: "docker"
      DOCKERFILE: "docker/${{ matrix.image }}/Dockerfile.${{ matrix.os }}"
      DOCKER_TAG: "devshop/${{ matrix.image }}:${{ matrix.os }}"
      DOCKER_NAME: "devshop-${{ matrix.image }}-${{ matrix.os }}"
      HOSTNAME: "devshop.${{ github.event.pull_request.number }}.${{ matrix.os }}.actions.github.com"
      DOCKER_BUILD_COMMAND: "docker build . --file ${IMAGE}/Dockerfile.${OS} --tag devshop/${IMAGE}:${OS}"
      DEVSHOP_SOURCE_PATH: "/usr/share/devshop"
      DEVSHOP_SCRIPT_PATH: "/root/install.sh"

    runs-on: ubuntu-latest
    steps:

    - name: Check Out Sourcecode
      uses: actions/checkout@v2

    - env: {IMAGE: "base"}
      name: "Build Containers: devshop/${{env.IMAGE}}"
      working-directory: ${{env.DOCKER_DIR}}
      run: "docker build . --file ${{env.IMAGE}}/Dockerfile.${{env.OS}} --tag devshop/${{env.IMAGE}}:${{env.OS}}"

    - env: {IMAGE: "ansible"}
      name: "Build Containers: devshop/${{env.IMAGE}}"
      working-directory: ${{env.DOCKER_DIR}}
      run: "docker build . --file ${{env.IMAGE}}/Dockerfile.${{env.OS}} --tag devshop/${{env.IMAGE}}:${{env.OS}}"

    - env: {IMAGE: "base"}
      name: "Launch Container: devshop/${{env.IMAGE}}"
      run: |
        docker run \
          --name devshop-${IMAGE}-${OS} \
          --detach \
          --privileged \
          --volume /sys/fs/cgroup:/sys/fs/cgroup:ro \
          --volume ${PWD}/install/install.sh:${DEVSHOP_SCRIPT_PATH} \
          --volume ${PWD}:${DEVSHOP_SOURCE_PATH} \
          --hostname ${HOSTNAME} \
          devshop/${IMAGE}:${OS}

    # @TODO: Test installing via ansible playbook.

    # Test out Install.sh against "devshop/base" to ensure it can prepare ansible.
    - env: {IMAGE: "base"}
      name: Run install.sh on devshop/${{env.IMAGE}}
      run: |
        docker exec devshop-${IMAGE}-${OS} \
          bash ${DEVSHOP_SCRIPT_PATH}

    - name: Save Assets
      if: always()
      run: |
        docker logs ${DOCKER_NAME} > ./.github/test-assets/docker-container.log
        docker exec ${DOCKER_NAME} systemctl s`tatus --no-pager > ./.github/test-assets/systemctl-status.log
