<?php


/**
 * Implements hook_hosting_service().
 */
function ansible_roles_hosting_service() {
    $services['ansible_roles'] = 'ansible';
    return $services;
}

/**
 * Implements hook_hosting_service_type().
 */
function ansible_roles_hosting_service_type()
{
    return array(
        'ansible' => array(
            'title' => t('Server Roles'),
        ),
    );
}

/**
 * Implements hook_permission()
 */
function ansible_roles_permission() {
    return array(
        'administer ansible roles' => array(
            'name' => t('Administer ansible roles'),
            'description' => t('Install and configure ansible roles.'),
        ),
    );
}

/**
 * Implements hook_menu().
 */
function ansible_roles_menu()
{
    $items['admin/hosting/roles'] = array(
      'title' => 'Ansible Roles',
      'description' => 'Manage available ansible roles.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('ansible_roles_settings'),
      'access arguments' => array('administer ansible roles'),
      'type' => MENU_LOCAL_TASK,
      'file' => 'ansible_roles.admin.inc',
    );
    $items['admin/hosting/roles/add'] = array(
      'title' => 'Add role',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('ansible_roles_settings_add'),
      'access arguments' => array('administer ansible roles'),
      'type' => MENU_LOCAL_ACTION,
      'file' => 'ansible_roles.admin.inc',
    );
    $items['admin/hosting/roles/delete'] = array(
      'title' => 'Delete role',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('ansible_roles_settings_delete', 4),
      'access arguments' => array('administer ansible roles'),
      'type' => MENU_CALLBACK,
      'file' => 'ansible_roles.admin.inc',
    );
    return $items;
}

/**
 * Implements hook_node_load().
 */
function ansible_roles_node_load($nodes, $types)
{
    foreach ($nodes as $node) {

        // If node is server master, load all available roles.
        if (isset($node->hosting_name) && $node->hosting_name == 'server_master') {

            // Load all available roles
            $node->ansible_roles_available = array();
            $results = db_select('hosting_ansible_roles_available', 'h')
                ->fields('h')
                ->execute()
                ->fetchAllAssoc('name');

            foreach ($results as $result) {
                $node->ansible_roles_available[$result->name] = array(
                    'name' => $result->name,
                    'src' => $result->src,
                    'version' => $result->version,
                );
            }
        }

        // Only act on server nodes with services.
        if (empty($node->services)) {
            continue;
        }

        // Load all roles to generate a playbook.
        // Pull out ansible roles to load last.
        $services = $node->services;
        $roles = array();

        foreach ($services as $type => $service) {
            // Load custom roles last.
            if ($type == 'ansible') {
                continue;
            }
            if (isset($service->roles)) {
                $roles = array_merge($roles, $service->roles);
            }
        }

        if (isset($services['ansible'])) {
            $roles = array_merge($roles, $node->services['ansible']->roles);
        }

        $node->roles = $roles;
    }
}

/**
 * Implements hook_node_view().
 */
function ansible_roles_node_view($node, $view_mode, $langcode)
{

    // Load all roles to generate a playbook.
    // Pull out ansible roles to load last.
    $services = $node->services;
    $roles = array();

    foreach ($services as $type => $service) {
        // Load custom roles last.
        if ($type == 'ansible') {
            continue;
        }
        if (isset($service->roles)) {
            $roles = array_merge($roles, $service->roles);
        }
    }

    if (isset($services['ansible'])) {
        $roles = array_merge($roles, $node->services['ansible']->roles);
    }

    $node->content['content'] = array(
      '#title' => t('Server Roles'),
      '#type' => 'item',
      '#markup' => theme('item_list', array('items' => $roles)),
    );

}