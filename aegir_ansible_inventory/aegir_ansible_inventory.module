<?php
/**
 * @file
 * Drupal module file for Aegir Ansible Inventory.
 */

/**
 * Implements hook_menu();
 * @return mixed
 */
function aegir_ansible_inventory_menu(){
    $items['inventory'] = array(
        'page callback' => 'aegir_ansible_inventory_endpoint',
        'access callback' => TRUE,
        'file' => 'inventory-endpoint.php',
    );
    $items['keys/%'] = array(
        'page callback' => 'devshop_servers_user_keys',
        'page arguments' => array(1),
        'access callback' => TRUE,
    );
    return $items;
}

/**
 * Implements hook_node_load().
 */
function aegir_ansible_inventory_node_load($nodes, $types)
{
    if (!in_array('server', $types)) {
      return;
    }

    // Load server_master. We need to know it's IP.
    $name = 'server_master';
    $server_master_ip = db_query("SELECT ip_address FROM {hosting_ip_addresses} ip LEFT JOIN {hosting_context} h ON ip.nid = h.nid WHERE name = :name", array(':name' => $name))
        ->fetchField();

    // Load host vars here.
    foreach ($nodes as $nid => &$node) {
        $node->ansible_vars = array();

        // Database Servers
        // If the server has mysql, load the user/password as variables
        if (isset($node->services['db'])) {

            // If there is a server master, we are assuming that it wants database access.
            // This is how aegir database service works.
            $user = array();
            $user['name'] = $node->services['db']->db_user;
            $user['password'] = $node->services['db']->db_passwd;
            $user['host'] = $server_master_ip;
            $user['priv']  = '*.*:ALL,GRANT';

            $node->ansible_vars['mysql_users'][] = $user;
            $node->ansible_vars['mysql_port'] = $node->services['db']->port;
        }

        // Web Servers
        // If the server has a web server, we need SSH access to deliver code and verify files.
        if (isset($node->services['http'])) {
            $node->ansible_vars['aegir_user_authorized_keys'] = variable_get('devshop_public_key', '');
        }
    }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function aegir_ansible_inventory_form_server_node_form_alter(&$form, &$form_state, $form_id)
{
    $form['note'] = array();
    $form['key'] = array();
    $form['title']['#description'] = t('The fully qualified hostname of the server you wish to add.');

    // Get list of available services.
    $services = hosting_server_services();
    foreach ($services as $type => $service) {
        $types[$type] = array_keys($service['types']);
    }


    // Hide restart command on server create forms.
    if (empty($form['#node']->nid)) {
        foreach ($types['http'] as $type) {
            $form['services']['http'][$type]['restart_cmd']['#type'] = 'value';
            $form['services']['http'][$type]['restart_cmd']['#value'] = $form['services']['http'][$type]['restart_cmd']['#default_value'];
            $form['services']['http'][$type]['restart_cmd_note'] = array(
                '#type' => 'item',
                '#title' => t('Restart Command'),
                '#description' => t('The "restart webserver" command will be determined automatically.'),
            );
        }
    }

    // Help text for web server.
    $form['services']['http']['help'] = array(
        '#markup' => t('Choose the type of webserver you would like to install. You may also choose the ports that will be used for this webserver.'),
        '#weight' => -100,
        '#prefix' => '<p>',
        '#suffix' => '</p>',
    );

    // Hide username and password fields
    foreach ($types['db'] as $type) {

        // Unset the db_user field. We will generate upon validation.
        $form['services']['db'][$type]['db_user']['#type'] = 'value';
        $form['services']['db'][$type]['db_user']['#value'] = '';
        $form['services']['db'][$type]['note'] = array(
            '#type' => 'item',
            '#title' => t('Username and Password'),
            '#description' => t('A mysql username and password will be generated automatically.'),
        );

        // Unset the db_pass field. We will generate upon validation.
        $form['services']['db'][$type]['db_passwd']['#type'] = 'value';
        $form['services']['db'][$type]['db_passwd']['#value'] = '';
    }

    $form['services']['db']['help'] = array(
        '#markup' => t('Choose the database service for this server.'),
        '#weight' => -100,
        '#prefix' => '<p>',
        '#suffix' => '</p>',
    );
}